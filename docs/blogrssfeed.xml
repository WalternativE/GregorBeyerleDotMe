<?xml version="1.0" encoding="utf-8"?><rss version="2.0"><channel><title>GregorBeyerleDotMe</title><link>https://www.gregorbeyerle.me/</link><description>Functional Programming, Data Science, Machine Learning and more!</description><language>en</language><managingEditor>hello@gregorbeyerle.me</managingEditor><lastBuildDate>Fri, 25 Dec 2020 17:09:40 +0100</lastBuildDate><item><link>https://www.gregorbeyerle.me/posts/2020/12/25/save-yourself-from-krampus-with-ml-net-and-f-sharp</link><title>Save yourself from Krampus with ML.NET and F#</title><description>This is the first year I've ever contributed to the F# Advent Calendar. For this very special occasion I thought it would make sense to give you a glimpse into the christmas traditions of my country - Austria. If you have never been to the Alpine regions of Europe you might have never heard of Krampus. Krampus is St. Nicholas' sidekick who punishes naughty children. Most christmas mythologies have some figure, that has the role of St. Nick's evil counterpart. This special character just happens to be a literal devil from the depths of hell, that beats you bloody in case you were a bad boy or girl. Having Krampus might seem a bit crass to outsiders but never forget - we're pretty catholic down here and by tradition "moral behavior" is taught to us from a very early age using a healthy mix of fear and violence. Good, that we live in modern times now and there is technology at our hands to keep us safe. Using F# and ML.NET we can build a complete end-to-end application, that uses machine learning to tell us if we can get something sweet from Santa or should hide away from evil Krampus.</description></item><item><link>https://www.gregorbeyerle.me/posts/2020/11/30/writing-formatters-for-dotnet-interactive</link><title>Writing Formatter Extensions for .NET Interactive</title><description>.NET Interactive is a pretty new and exiting way to do exploratory development with F#. One important thing about exploration is the visual inspection of your outputs. What fields are in those records? What's the content of this list? How would this data look in a bar chart or in a scatter plot? All questions we can answer by looking at formatted outputs. But how does .NET interactive know how to display these outputs for us in a form, that tells us what we need to know? In many cases (most cases even when you look at how big the .NET ecosystem is) it simply doesn't. But that's ok because we have the tools to write our own formatters and share them with the rest of the world.</description></item></channel></rss>